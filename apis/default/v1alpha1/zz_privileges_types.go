// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PrivilegesInitParameters struct {

	// The database to grant default privileges for this role.
	// The database to grant default privileges for this role
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type, schema).
	// The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type, schema)
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// Role for which apply default privileges (You can change default privileges only for objects that will be created by yourself or by roles that you are a member of).
	// Target role for which to alter default privileges.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// The list of privileges to apply as default privileges. An empty list could be provided to revoke all default privileges for this role.
	// The list of privileges to apply as default privileges
	// +listType=set
	Privileges []*string `json:"privileges,omitempty" tf:"privileges,omitempty"`

	// The name of the role to which grant default privileges on.
	// The name of the role to which grant default privileges on
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// The database schema to set default privileges for this role.
	// The database schema to set default privileges for this role
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Permit the grant recipient to grant it to others
	WithGrantOption *bool `json:"withGrantOption,omitempty" tf:"with_grant_option,omitempty"`
}

type PrivilegesObservation struct {

	// The database to grant default privileges for this role.
	// The database to grant default privileges for this role
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type, schema).
	// The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type, schema)
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// Role for which apply default privileges (You can change default privileges only for objects that will be created by yourself or by roles that you are a member of).
	// Target role for which to alter default privileges.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// The list of privileges to apply as default privileges. An empty list could be provided to revoke all default privileges for this role.
	// The list of privileges to apply as default privileges
	// +listType=set
	Privileges []*string `json:"privileges,omitempty" tf:"privileges,omitempty"`

	// The name of the role to which grant default privileges on.
	// The name of the role to which grant default privileges on
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// The database schema to set default privileges for this role.
	// The database schema to set default privileges for this role
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Permit the grant recipient to grant it to others
	WithGrantOption *bool `json:"withGrantOption,omitempty" tf:"with_grant_option,omitempty"`
}

type PrivilegesParameters struct {

	// The database to grant default privileges for this role.
	// The database to grant default privileges for this role
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type, schema).
	// The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type, schema)
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// Role for which apply default privileges (You can change default privileges only for objects that will be created by yourself or by roles that you are a member of).
	// Target role for which to alter default privileges.
	// +kubebuilder:validation:Optional
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// The list of privileges to apply as default privileges. An empty list could be provided to revoke all default privileges for this role.
	// The list of privileges to apply as default privileges
	// +kubebuilder:validation:Optional
	// +listType=set
	Privileges []*string `json:"privileges,omitempty" tf:"privileges,omitempty"`

	// The name of the role to which grant default privileges on.
	// The name of the role to which grant default privileges on
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// The database schema to set default privileges for this role.
	// The database schema to set default privileges for this role
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Permit the grant recipient to grant it to others
	// +kubebuilder:validation:Optional
	WithGrantOption *bool `json:"withGrantOption,omitempty" tf:"with_grant_option,omitempty"`
}

// PrivilegesSpec defines the desired state of Privileges
type PrivilegesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrivilegesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PrivilegesInitParameters `json:"initProvider,omitempty"`
}

// PrivilegesStatus defines the observed state of Privileges.
type PrivilegesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrivilegesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Privileges is the Schema for the Privilegess API. Creates and manages default privileges given to a user for a database schema.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,postgresql}
type Privileges struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.database) || (has(self.initProvider) && has(self.initProvider.database))",message="spec.forProvider.database is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.objectType) || (has(self.initProvider) && has(self.initProvider.objectType))",message="spec.forProvider.objectType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.owner) || (has(self.initProvider) && has(self.initProvider.owner))",message="spec.forProvider.owner is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.privileges) || (has(self.initProvider) && has(self.initProvider.privileges))",message="spec.forProvider.privileges is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.role) || (has(self.initProvider) && has(self.initProvider.role))",message="spec.forProvider.role is a required parameter"
	Spec   PrivilegesSpec   `json:"spec"`
	Status PrivilegesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivilegesList contains a list of Privilegess
type PrivilegesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Privileges `json:"items"`
}

// Repository type metadata.
var (
	Privileges_Kind             = "Privileges"
	Privileges_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Privileges_Kind}.String()
	Privileges_KindAPIVersion   = Privileges_Kind + "." + CRDGroupVersion.String()
	Privileges_GroupVersionKind = CRDGroupVersion.WithKind(Privileges_Kind)
)

func init() {
	SchemeBuilder.Register(&Privileges{}, &PrivilegesList{})
}
